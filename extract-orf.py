from Bio import SeqIO
import argparse
import gzip
import regex
import pickle


def main():
    parser = argparse.ArgumentParser(
        description='Extract genes from reads')
    parser.add_argument('file1', metavar="<FILE1>",
                        help='file containing first reads from PE')

    args = parser.parse_args()
    r1 = make_read_list(args.file1)

    nvec = find_occurences(r1[0], '-')
    newread = extract_characters_indices(r1[0], nvec)

    #read = r1[0].replace("-", "")

    gene_bnrf = "ATGGAAGAGAGGGGCAGGGAAACGCAAATGCCGGTTGCCCGGTATGGGGGCCCGTTTATTATGGTAAGGCTCTTCGGGCAAGATGGAGAGGCAAACATACAGGAGGAAAGGCTATATGAGCTACTCTCTGACCCACGCTCCGCGCTCGGCCTAGACCCGGGGCCCCTGATTGCTGAGAACCTGCTGCTAGTGGCGCTGCGTGGCACCAACAACGATCCCAGGCCTCAGCGTCAGGAGAGGGCCAGAGAACTGGCCCTCGTTGGCATTCTACTAGGAAACGGCGAGCAGGGTGAACACTTGGGCACGGAGAGTGCCCTGGAGGCCTCAGGCAACAACTATGTGTATGCCTACGGACCAGACTGGATGGCAAGGCCTTCCACATGGTCCGCGGAAATCCAGCAATTCCTGCGACTCCTGGGCGCCACGTACGTGCTTCGCGTGGAGATGGGCAGGCAGTTTGGCTTCGAGGTGCATAGAAGCCGGCCCTCCTTCCGTCAGTTCCAGGCCATCAATCACCTTGTCCTGTTTGACAACGCCCTTCGCAAGTACGATTCCGGCCAGGTGGCGGCGGGCTTCCAGAGGGCCCTTCTGGTGGCCGGGCCAGAGACCGCTGACACGAGGCCGGACCTCCGCAAGCTGAATGAGTGGGTGTTTGGTGGCAGGGCTGCTGGTGGCAGACAGCTGGCCGACGAGCTAAAGATCGTGTCCGCGCTGCGAGACACTTACTCGGGCCACTTGGTCCTTCAGCCCACGGAGACCCTTGACACATGGAAGGTGTTGAGCAGGGACACACGAACCGCTCATAGTTTGGAGCACGGATTCATTCATGCCGCGGGGACCATCCAGGCCAACTGCCCACAGCTGTTTATGAGACGCCAGCACCCCGGCCTCTTTCCCTTCGTTAATGCAATAGCATCATCGCTGGGCTGGTACTACCAGACCGCCACCGGCCCCGGAGCAGATGCCAGGGCGGCGGCCCGGCGCCAACAGGCCTTTCAGACCAGGGCGGCGGCTGAATGCCATGCCAAAAGCGGGGTGCCGGTCGTGGCCGGCTTCTACAGGACCATCAACGCCACGCTCAAGGGAGGAGAGGGCCTACAGCCCACTATGTTTAACGGGGAGCTGGGGGCCATCAAGCACCAGGCACTTGACACTGTGAGGTATGACTACGGCCACTATCTCATAATGTTGGGGCCATTCCAGCCATGGAGCGGACTGACGGCCCCTCCGTGCCCCTACGCCGAAAGTTCATGGGCACAGGCGGCCGTGCAGACGGCCCTCGAGCTGTTCTCGGCCCTGTACCCGGCCCCGTGCATCTCGGGCTACGCGCGCCCCCCGGGCCCCAGTGCTGTGATCGAGCATCTGGGGTCCCTAGTTCCAAAGGGGGGTCTGCTGTTGTTTCTGTCTCACCTACCGGATGATGTTAAGGACGGGCTCGGAGAAATGGGGCCGGCCAGGGCCACGGGACCTGGAATGCAGCAGTTTGTCAGCAGCTACTTCCTCAACCCCGCCTGTTCCAACGTCTTCATTACAGTGAGGCAGCGAGGGGAGAAGATCAACGGCCGTACCGTCCTCCAAGCGCTCGGACGCGCATGCGATATGGCAGGCTGCCAGCACTATGTGCTGGGCTCCACGGTTCCCCTCGGTGGACTCAACTTTGTCAACGACCTGGCGTCCCCGGTTTCCACCGCCGAGATGATGGATGATTTCTCTCCCTTCTTCACCGTGGAGTTTCCCCCGATTCAAGAGGAGGGCGCAAGTTCTCCGGTACCCTTAGATGTGGACGAGAGCATGGACATCTCTCCGTCTTACGAGTTGCCCTGGCTCTCGCTGGAGTCATGCCTCACAAGCATCCTGTCACACCCCACCGTGGGAAGCAAGGAGCACTTGGTCAGGCACACGGACAGGGTCAGCGGAGGACGCGTGGCACAGCAGCCCGGGGTAGGTCCCCTGGACCTGCCGCTGGCGGACTACGCCTTCGTTGCCCACAGTCAGGTCTGGACCAGGCCCGGTGGGGCTCCTCCCTTGCCCTATCGTACCTGGGATCGAATGACAGAGAAGCTGCTTGTCTCCGCAAAACCCGGCGGAGAGAACGTTAAGGTTTCAGGTACCGTGATTACATTGGGAGAACAGGGGTACAAAGTGTCGTTGGATCTGAGGGAGGGAACCAGGCTGGCAATGGCTGAGGCGCTGCTGAACGCAGCATGTGCCCCAATCTTGGATCCGGAAGACGTCTTGCTCACCCTGCATCTACACCTGGATCCGCGCCGGGCAGACAACTCGGCCGTGATGGAGGCTATGACGGCGGCGAGTGACTACGCGCGTGGCCTGGGCGTGAAGCTGACCTTTGGCTCGGCCTCCTGCCCCGAGACCGGCTCGTCCGCCTCCAACTTCATGACCGTGGTGGCCTCTGTCTCCGCCCCAGGGGAATTCTCGGGTCCTCTGATCACGCCAGTGCTTCAGAAGACGGGCAGTCTCCTGATTGCGGTGCGTTGCGGGGATGGCAAGATCCAGGGAGGGTCGCTGTTTGAGCAGCTCTTTAGCGACGTGGCCACGACCCCACGGGCACCCGAGGCGTTGTCTCTGAAGAATCTCTTCCGGGCAGTCCAGCAGCTGGTCAAGAGCGGCATCGTGCTGTCAGGGCATGACATCAGCGACGGGGGCCTGGTGACCTGCCTGGTGGAGATGGCCCTGGCCGGGCAGCGGGGAGTGACCATCACTATGCCGGTGGCCTCCGACTACCTCCCGGAGATGTTTGCAGAGCACCCCGGCCTGGTGTTTGAGGTGGAGGAGCGCAGCGTGGGTGAGGTGCTGCAGACCCTGCGCTCCATGAACATGTACCCGGCAGTCCTCGGTCGAGTGGGCGAGCAAGGTCCAGATCAAATGTTTGAGGTGCAGCACGGCCCAGAGACGGTGTTGCGCCAGTCGCTGCGCCTGCTGCTGGGAACCTGGTCATCCTTTGCCAGCGAGCAGTACGAGTGCCTGCGACCAGATCGGATTAACCGGTCCATGCACGTGTCCGACTACGGCTATAACGAAGCACTGGCAGTCTCCCCGTTGACAGGAAAGAATCTCAGCCCACGCCGGTTGGTGACAGAGCCTGACCCACGATGTCAGGTGGCCGTGCTATGCGCCCCGGGCACCAGGGGCCATGAAAGCCTCCTGGCGGCCTTCACGAATGCCGGATGCCTGTGCCGACGGGTGTTCTTTCGCGAGGTTAGGGACAACACGTTCCTCGACAAGTACGTGGGTCTGGCCATCGGAGGAGTTCATGGGGCCAGGGACTCTGCCCTGGCAGGCCGTGCCACCGTGGCGCTGATTAATCGTTTCCCCGCCCTGCGTGACGCTATTCTAAAGTTCCTCAACAGGCCAGATACGTTCTCGGTGGCCTTGGGGGAGCTGGGGGTGCAAGTTTTGGCTGGCCTGGGGGCCGTGGGGTCAACAGATAATCCACCCGCCCCTGGCGTGGAAGTTAATGTCCAGAGATCACCTCTGATTCTGGCCCCCAACGCCTCTGGCATGTTTGAGTCCCGCTGGCTGAACATTAGCATCCCGGCGACCACCAGCTCTGTCATGCTGCGTGGCCTCCGGGGCTGCGTCCTGCCTTGTTGGGTGCAAGGCTCGTGCCTGGGCCTGCAATTTACTAACCTCGGGATGCCATATGTTTTGCAGAATGCCCACCAGATCGCCTGCCACTTCCACAGCAATGGCACGGATGCCTGGCGCTTTGCTATGAATTATCCAAGAAACCCCACGGAGCAGGGCAACATTGCAGGGCTCTGTTCACGCGATGGTCGTCATCTGGCTCTCCTGTGTGACCCCTCACTTTGTACAGACTTTTGGCAATGGGAGCACATTCCCCCCGCCTTTGGGCACCCCACGGGGTGCTCCCCCTGGACACTTATGTTTCAAGCAGCTCACCTATGGTCACTCAGGCACGGTCGCCCCTCCGAGTGA"

    
    pattern = regex.compile(r"(" + gene_bnrf + r"){e<=1}", flags=regex.IGNORECASE)
    result = pattern.search(read)
    if result:
        print(result.start(), result.end())

def extract_characters_indices(string, vecindices):
    print(vecindices)
    vecindices = [0] + vecindices + [len(string)]
    print(vecindices)
    newread = ''
    for i in range(len(vecindices) - 1):

        start = vecindices[i]
        end = vecindices[i+1]
        if vecindices[i] != 0:
            start = vecindices[i] + 1;
        newread += string[start:end]
    return newread


def find_occurences(string, ch):
    return [i for i, letter in enumerate(string) if letter == ch]

def make_read_list(file):
    reads = []
    handle = open(file, 'rU')
    for record in SeqIO.parse(handle, "fasta"):
        reads.append(str(record.seq))
    return(reads)

if __name__ == '__main__':
    main()
